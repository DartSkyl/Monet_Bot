from loader import subscription_dict, channels_dict, bot, db
from aiogram import html
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters.callback_data import CallbackData


# ========== –ö–ª–∞—Å—Å—ã –∫–æ–ª–ª–±—ç–∫–æ–≤ ==========


class SubAddForChannel(CallbackData, prefix='sub'):
    """–ö–ª–∞—Å—Å –∫–æ–ª–ª–±—ç–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    chn_id: str
    chn_name: str


class SubDel(CallbackData, prefix='subdel'):
    """–ö–ª–∞—Å—Å –∫–æ–ª–ª–±—ç–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏"""
    sub_period: int
    chnl_id: int


class AddSubForUser(CallbackData, prefix='addsub'):
    """–ö–ª–∞—Å—Å –∫–æ–ª–ª–±—ç–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Ä—É—á–Ω—É—é"""
    chl_id: int
    chl_name: str


class QueueSelection(CallbackData, prefix='queue'):
    """–ö–ª–∞—Å—Å –∫–æ–ª–ª–±—ç–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    chnl_id: int
    chnl_name: str


class TriggerSettings(CallbackData, prefix='trigger'):
    """–ö–ª–∞—Å—Å –∫–æ–ª–ª–±—ç–∫–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    trigger_itself: str = 'None'
    interval: str = 'None'
    day_of_the_week: str = 'None'
    next_step: str = 'None'


class AddingPublication(CallbackData, prefix='add_post'):
    """–ö–ª–∞—Å—Å –∫–æ–ª–ª–±—ç–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    publication_type: str


# ========== –°–∞–º–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ==========


def del_board(chl_list):
    """–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫"""
    sub_del_board = InlineKeyboardBuilder()
    paid_channels = chl_list
    for chann in paid_channels:
        sub_del_board.button(text=str(chann['channel_name'] + ':'), callback_data='0')
        for period, cost in sorted(subscription_dict[chann['channel_id']].items()):
            if period != 0:
                button_text = f'–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {period} –¥–Ω—è/–¥–Ω–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {cost} —Ä—É–±–ª–µ–π'
                sub_del_board.button(text=button_text,
                                     callback_data=SubDel(sub_period=period, chnl_id=int(chann["channel_id"])))
        # –ï—Å–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –Ω–µ—Ç –¥–∞–∂–µ –µ–≥–æ (—Ö–æ—Ç—è —Ç–∞–∫–æ–≥–æ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ)
        if len(subscription_dict[chann['channel_id']]) <= 1:
            button_text = '–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞!'
            sub_del_board.button(text=button_text, callback_data='00')
    sub_del_board.adjust(1)
    return sub_del_board.as_markup(resize_keyboard=True)


async def add_sub_channel_keyboard():
    """–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏. –ò –¥–ª—è –ø—Ä–æ–±–Ω–æ–π —Ç–æ–∂–µ"""
    sub_channel_keyboard = InlineKeyboardBuilder()
    paid_channels = await db.get_paid_channels_list()
    for channel in paid_channels:
        sub_channel_keyboard.button(text=channel['channel_name'],
                                    callback_data=SubAddForChannel(chn_id=str(channel['channel_id']),
                                                                   chn_name=str(channel['channel_name'])))
    sub_channel_keyboard.adjust(1)
    return sub_channel_keyboard.as_markup(resize_keyboard=True)


async def add_sub_keyboard():
    """–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Ä—É—á–Ω—É—é.
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ (—Ç.–µ. –∑–∞–∫—Ä—ã—Ç—ã—Ö, channels_dict['is_paid'])"""
    add_sub_board = InlineKeyboardBuilder()
    for ch_id in channels_dict['is_paid']:
        chl_info = await bot.get_chat(chat_id=ch_id)
        add_sub_board.button(text=str(chl_info.title),
                             callback_data=AddSubForUser(chl_id=ch_id, chl_name=chl_info.title))
    add_sub_board.adjust(1)
    return add_sub_board.as_markup(resize_keyboard=True)


async def queue_selection_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    queues_keyboard = InlineKeyboardBuilder()
    channels_list = await db.get_channel_list()
    for channel in channels_list:
        queues_keyboard.button(text=channel['channel_name'],
                               callback_data=QueueSelection(
                                   chnl_id=channel['channel_id'],
                                   chnl_name=channel['channel_name']))
    queues_keyboard.adjust(1)
    return queues_keyboard.as_markup(resize_keyboard=True)


async def tr_set_keyboard(step):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    trigger_keyboard = InlineKeyboardBuilder()
    if step == 1:
        trigger_keyboard.button(text='–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è',
                                callback_data=TriggerSettings(trigger_itself='cron'))
        trigger_keyboard.button(text='–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏',
                                callback_data=TriggerSettings(trigger_itself='interval'))
        trigger_keyboard.adjust(1)
        return trigger_keyboard.as_markup(resize_keyboard=True, one_time_keyboard=True)
    elif step == 2:
        # mon,tue,wed,thu,fri,sat,sun
        day_of_week = {'–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 'mon', '–í—Ç–æ—Ä–Ω–∏–∫': 'tue', '–°—Ä–µ–¥–∞': 'wed',
                       '–ß–µ—Ç–≤–µ—Ä–≥': 'thu', '–ü—è—Ç–Ω–∏—Ü–∞': 'fri', '–°—É–±–±–æ—Ç–∞': 'sat', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 'sun', '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å': '*'}
        for day_key, day_value in day_of_week.items():
            trigger_keyboard.button(text=day_key, callback_data=TriggerSettings(day_of_the_week=day_value))
        trigger_keyboard.button(text='–û—Ç–º–µ–Ω–∞', callback_data=TriggerSettings(next_step='cancel'))
        trigger_keyboard.button(text='–î–∞–ª—å—à–µ ‚û°Ô∏è', callback_data=TriggerSettings(next_step='next_step'))
        trigger_keyboard.adjust(2)
        return trigger_keyboard.as_markup(resize_keyboard=True)


async def publication_type():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    post_type_keyboard = InlineKeyboardBuilder()
    types_dict = {'–¢–µ–∫—Å—Ç': 'text', '–ö–∞—Ä—Ç–∏–Ω–∫–∞ + –¢–µ–∫—Å—Ç': 'pic_text', '–ö–∞—Ä—Ç–∏–Ω–∫–∞': 'pic', '–í–∏–¥–µ–æ + –¢–µ–∫—Å—Ç': 'video_text',
                  '–í–∏–¥–µ–æ': 'video', '–í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ': 'video_note', '–§–∞–π–ª + –¢–µ–∫—Å—Ç': 'file_text', '–§–∞–π–ª': 'file'}

    for post_type, type_id in types_dict.items():
        post_type_keyboard.button(text=post_type, callback_data=AddingPublication(publication_type=type_id))
    post_type_keyboard.button(text='–û—Ç–º–µ–Ω–∞', callback_data=AddingPublication(publication_type='cancel'))

    post_type_keyboard.adjust(2)
    return post_type_keyboard.as_markup(resize_keyboard=True)


async def view_publications_list(page_dict):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    buttons = [
        [
            InlineKeyboardButton(text='üîé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª', callback_data='get_file')
        ],
        [
            InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_page'),
            InlineKeyboardButton(text=f'{page_dict["page"]}/{page_dict["count"]}', callback_data='empty'),
            InlineKeyboardButton(text='–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', callback_data='next_page')
        ],
        [
            InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é', callback_data='start_delete')
        ]
    ]
    demonstration_keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return demonstration_keyboard


async def return_to_queue():
    """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –æ–±—Ä–∞—Ç–Ω–æ –∫ –æ—á–µ—Ä–µ–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    button = [[InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='return')]]
    return InlineKeyboardMarkup(inline_keyboard=button)


async def deletion_confirmation():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    buttons = [[
        InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å', callback_data='delete'),
        InlineKeyboardButton(text='üö´ –û—Ç–º–µ–Ω–∞', callback_data='return')
    ]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)
