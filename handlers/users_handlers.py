from datetime import date, datetime
from config_data.config import PAYMENT_TOKEN
from loader import users_mess_dict, bot, db, subscription_dict, admins_id
from states import UserPayment, CommunicationAdministration
from utils import users_router
from utils.subscription_management import SubManag
from keyboards import (main_user_keyboard, channels_selection,
                       view_description, ChannelsSelection,
                       subscription_keyboard, SubscriptionSelection,
                       ChannelsForPayment, channels_for_payment, user_cancel)
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram.fsm.context import FSMContext
from aiogram import F, html
from aiogram.filters import Command
from aiogram.exceptions import TelegramForbiddenError


@users_router.message(Command('start'))
async def user_start(msg: Message) -> None:
    """–ó–¥–µ—Å—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    await msg.answer(text=users_mess_dict['hi_mess'],
                     reply_markup=main_user_keyboard)


@users_router.message(F.text == 'üîé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã')
async def looking_channels(msg: Message):
    """–ó–¥–µ—Å—å –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –ò –ø–ª–∞—Ç–Ω—ã—Ö, –∏ –Ω–µ—Ç"""
    msg_text = '‚¨áÔ∏è<b>–í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</b>‚¨áÔ∏è'
    await msg.answer(text=msg_text, reply_markup=await channels_selection())


@users_router.callback_query(ChannelsSelection.filter())
async def view_description_and_go_to_channel(callback: CallbackQuery, callback_data: ChannelsSelection):
    """–ó–¥–µ—Å—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–æ–≤"""
    channel = await bot.get_chat(callback_data.channel_id)
    channel_url = channel.invite_link  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
    channel_name = channel.title

    msg_text = f'–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ <i><b>{html.quote(channel_name)}</b></i>:\n'
    msg_text += '<i>- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç -</i>' if not users_mess_dict.get(str(callback_data.channel_id)) \
        else html.quote(users_mess_dict[str(callback_data.channel_id)])

    await callback.message.delete()
    await callback.message.answer(text=msg_text, reply_markup=await view_description(channel_url))


@users_router.callback_query(F.data.in_(['go_back', 'cancel']))
async def return_and_cancel(callback: CallbackQuery):
    """–ó–¥–µ—Å—å –≤–æ–∑–≤—Ä–∞—Ç –∏ –æ—Ç–º–µ–Ω–∞"""
    if callback.data == 'go_back':
        await callback.message.delete()
        msg_text = '‚¨áÔ∏è<b>–í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</b>‚¨áÔ∏è'
        await callback.message.answer(text=msg_text, reply_markup=await channels_selection())
    else:
        await callback.message.delete()
        await callback.message.answer(text='–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è', reply_markup=main_user_keyboard)


@users_router.message(F.text == '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –í–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ')
async def get_subscription_info(msg: Message):
    """–ó–¥–µ—Å—å –≤—ã–≤–æ–¥–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö –∏–º–µ—é—â–∏—Ö—Å—è –ø–æ–¥–ø–∏—Å–∫–∞—Ö"""
    paid_channels = await db.get_paid_channels_list()
    user_id = msg.from_user.id
    msg_text = '<b>–í–∞—à–∏ –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n====================\n'
    for channel in paid_channels:  # –ü—Ä–æ–π–¥–µ–º—Å—è –ø–æ –≤—Å–µ–º –ø–ª–∞—Ç–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º
        user_subscription = await db.get_user_from_channel(user_id=user_id, channel_id=channel['channel_id'])
        if len(user_subscription) > 0:  # –ï—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –ø–æ —ç—Ç–æ–º—É –∫–∞–Ω–∞–ª—É –∑–∞–ø–∏—Å–µ–π —É –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç –∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Ç–æ–∂–µ
            end_sub = datetime.fromtimestamp(user_subscription[0]['end_of_subscription']).strftime('%m-%d-%Y %H:%M')
            msg_text += f'<i><b>{html.quote(channel["channel_name"])}</b></i> - –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ <i>{end_sub}</i>\n\n'

    await msg.answer(text=msg_text)


@users_router.message(F.text == 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
async def start_pay_for_subscription(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É"""
    await state.set_state(UserPayment.choice_channel)
    await msg.answer(text='–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞–Ω–∞–ª:', reply_markup=await channels_for_payment())


@users_router.callback_query(UserPayment.choice_channel, ChannelsForPayment.filter())
async def select_subscription(callback: CallbackQuery, callback_data: ChannelsForPayment, state: FSMContext):
    """–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª –¥–∞–µ–º –Ω–∞ –≤—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    # –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω–∏–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    channel_name = (await bot.get_chat(callback_data.channel_id)).title
    await state.set_data({'channel_id': callback_data.channel_id, 'channel_name': channel_name})
    await callback.message.delete()
    msg_text = f'–ö–∞–Ω–∞–ª: <b>{html.quote(channel_name)}</b>\n–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∏:'
    await callback.message.answer(text=msg_text,
                                  reply_markup=await subscription_keyboard(subscription_dict[callback_data.channel_id]))
    await state.set_state(UserPayment.choice_period)


@users_router.callback_query(UserPayment.choice_period, SubscriptionSelection.filter())
async def formation_of_payment(callback: CallbackQuery, callback_data: SubscriptionSelection, state: FSMContext):
    """–ó–¥–µ—Å—å —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    sub_info = await state.get_data()
    des_text = (f'–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª {sub_info["channel_name"]} '
                f'—Å—Ä–æ–∫–æ–º –Ω–∞ {callback_data.period} –¥–Ω—è/–¥–Ω–µ–π')
    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title=f'–ö–∞–Ω–∞–ª {sub_info["channel_name"]}',
        description=des_text,
        payload=f'{sub_info["channel_id"]}_{callback_data.cost}',
        provider_token=PAYMENT_TOKEN,
        currency='rub',
        prices=[LabeledPrice(
            label=f'–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {callback_data.period} –¥–Ω—è/–¥–Ω–µ–π',
            amount=(callback_data.cost * 100))],
        start_parameter='Go',
        request_timeout=15)
    await state.update_data({'period': callback_data.period, 'cost': callback_data.cost})
    await state.set_state(UserPayment.payment)  # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –∑–∞–¥–∞–¥–∏–º —Å—Ç—ç–π—Ç


@users_router.pre_checkout_query(UserPayment.payment)
async def pre_check_query(pre_check: PreCheckoutQuery):
    """–ì–æ–≤–æ—Ä–∏–º —Ç–µ–ª–µ–≥—Ä–∞–º–º—É, —á—Ç–æ –≤—Å–µ –û–ö"""
    await pre_check.answer(ok=True)


@users_router.message(UserPayment.payment, F.successful_payment)
async def test_payment(msg: Message, state: FSMContext):
    """–ö–æ–≥–¥–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—Å—è –Ω–∞—á–∏—Å–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞—è–≤–ª–µ–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
    sub_info = await state.get_data()

    # –ù–∞–∫–∏–¥—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥

    await SubManag.add_user_paid_sub(
        user_id=msg.from_user.id,
        channel_id=sub_info['channel_id'],
        period=sub_info['period']
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—é
    await db.add_revenue(
        channel_id=sub_info['channel_id'],
        date_today=str(date.today()),
        revenue=int(sub_info['cost'])
    )

    msg_text = (f'–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ <i><b>{html.quote(sub_info["channel_name"])}</b></i>\n'
                f'—Å—Ä–æ–∫–æ–º –Ω–∞ <b>{sub_info["period"]}</b> –¥–Ω—è/–¥–Ω–µ–π\n'
                f'–¥–æ–±–∞–≤–ª–µ–Ω–∞!\n')
    msg_text += users_mess_dict['paid']
    await msg.answer(text=msg_text, reply_markup=main_user_keyboard)
    await state.clear()


@users_router.message(F.text == 'üì® –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π')
async def communication_with_the_administration(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π"""
    # –ï—Å–ª–∏ —é–∑–µ—Ä–Ω—ç–π–º –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if users_mess_dict['admin_username'] and users_mess_dict['admin_username'] != '@__None__':
        await msg.answer(text=f'–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏: {users_mess_dict["admin_username"]}')

    else:
        await msg.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:', reply_markup=user_cancel)
        await state.set_state(CommunicationAdministration.write_message)


@users_router.message(F.text == 'üö´ –û—Ç–º–µ–Ω–∞')
async def send_message_cancel(msg: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await msg.answer(text='–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=main_user_keyboard)
    await state.clear()


@users_router.message(CommunicationAdministration.write_message)
async def send_user_message(msg: Message, state: FSMContext):
    """–ï—Å–ª–∏ —é–∑–µ—Ä–Ω—ç–π–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    —Ä–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º"""
    for admin in admins_id:
        try:
            await msg.forward(chat_id=admin)
        except TelegramForbiddenError:
            # –í —Å–ø–∏—Å–∫–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±—É–¥–µ—Ç –∏ ID —Å–∞–º–æ–≥–æ –±–æ—Ç–∞.
            # –ò –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ –≤—ã—Å–∫–æ—á–∏—Ç —ç—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            pass

    await msg.answer(text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', reply_markup=main_user_keyboard)
    await state.clear()
