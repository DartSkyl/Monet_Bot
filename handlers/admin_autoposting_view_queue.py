from aiogram.utils.media_group import MediaGroupBuilder

from utils import admin_router, dict_queue
from states import AutoPost
from loader import bot
from keyboards import (auto_posting, queue_selection_keyboard,
                       QueueSelection, view_publications_list,
                       deletion_confirmation, returning_button)

from aiogram import F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest


@admin_router.message(F.text == 'üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π')
async def publish_queue(message: Message, state: FSMContext):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—á–µ—Ä–µ–¥–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    select_keyboard = await queue_selection_keyboard()
    await message.answer(text='–í—ã–±–µ—Ä–µ—Ç–µ –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', reply_markup=select_keyboard)
    await state.set_state(AutoPost.check_queue)


@admin_router.callback_query(QueueSelection.filter(), AutoPost.check_queue)
async def start_demonstration_queue(callback: CallbackQuery, callback_data: QueueSelection, state: FSMContext):
    """–ó–¥–µ—Å—å —Å—Ç–∞—Ä—Ç—É–µ—Ç –ø–æ–∫–∞–∑ –æ—á–µ—Ä–µ–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    await callback.answer()
    channel_name = (await bot.get_chat(callback_data.chnl_id)).title
    msg_text = await dict_queue[callback_data.chnl_id].get_queue_info(channel_name)
    await callback.message.answer(text=msg_text, reply_markup=returning_button)
    await callback.message.delete()
    try:
        list_of_publication = await dict_queue[callback_data.chnl_id].get_list_publication()
        first_publication = list_of_publication[0]
        publication_info = first_publication.get_info()
        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–¥–∏–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ –±—ã –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–ø–∏—Å–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–π
        await state.set_data({'count': len(list_of_publication), 'page': 1})
        # –ò —Å—Ä–∞–∑—É –∂–µ —Å–¥–µ–ª–∞–µ–º –∏–∑ –Ω–∏—Ö —Å–ª–æ–≤–∞—Ä—å, —á—Ç–æ –±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –∏—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        page = await state.get_data()

        await callback.message.answer(text=publication_info, reply_markup=await view_publications_list(page))

        await state.set_state(AutoPost.view_publications)
        await state.update_data({'channel_id': callback_data.chnl_id, 'publication': first_publication})

    except IndexError:  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø—É—Å—Ç
        await callback.message.answer(text='<b>–û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø—É—Å—Ç–∞!</b>', reply_markup=auto_posting)
        await state.clear()


@admin_router.callback_query(AutoPost.view_publications, F.data.in_(['next_page', 'back_page']))
async def queue_demonstration(callback: CallbackQuery, state: FSMContext):
    """–ó–¥–µ—Å—å –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –æ—á–µ—Ä–µ–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    channel_id = (await state.get_data())['channel_id']

    # –ó–¥–µ—Å—å —Ç–∞–∫ –∂–µ –µ—Å—Ç—å –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π, –Ω–æ –Ω–∞–º —ç—Ç–æ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç, –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ 'page' –∏ 'count'
    page = await state.get_data()
    display_publication_index = page['page'] - 1  # –û—á–µ–≤–∏–¥–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –Ω—É–º–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1, –∞ –∏–Ω–¥–µ–∫—Å–∞ —Å 0
    next_publication = None  # –î–∞–ª—å—à–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
    list_of_publication = await dict_queue[channel_id].get_list_publication()
    page['count'] = len(list_of_publication)  # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á—Ç–æ-–Ω–∏–±—É–¥—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–æ—Å—å
    try:
        if callback.data == 'next_page':
            if display_publication_index < (page['count'] - 1):
                next_publication = list_of_publication[display_publication_index + 1]
                page['page'] += 1  # –ò —Å—Ä–∞–∑—É –º–µ–Ω—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            else:
                # –ï—Å–ª–∏ –¥–æ–π–¥—è –¥–æ –∫–æ–Ω—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏—Å—Ç–∞–µ—Ç –≤–ø–µ—Ä–µ–¥,
                # —Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é
                next_publication = list_of_publication[0]
                page['page'] = 1

        elif callback.data == 'back_page':
            if display_publication_index > 0:
                next_publication = list_of_publication[display_publication_index - 1]
                page['page'] -= 1  # –ò —Å—Ä–∞–∑—É –º–µ–Ω—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            else:
                # –ï—Å–ª–∏ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞ –ª–∏—Å—Ç–∞—é—Ç –Ω–∞–∑–∞–¥,
                # —Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ —Å–ø–∏—Å–∫–µ
                next_publication = list_of_publication[page['count'] - 1]
                page['page'] = page['count']
    except IndexError:
        # –ï—Å–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –æ—Å—Ç–∞–ª–∞—Å—å –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –∏ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–Ω–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∞—Å—å,
        # –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –ø–æ–ª–∏—Å—Ç–∞—Ç—å. –î–∞ –º–∞—Ä–∞–∑–º! –ò —á—Ç–æ?
        await callback.message.delete()
        await callback.message.answer(text='<b>–û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø—É—Å—Ç–∞!</b>', reply_markup=auto_posting)
        await state.clear()

    try:
        await callback.message.edit_text(text=next_publication.get_info(),
                                         reply_markup=await view_publications_list(page))

        await state.update_data({  # –°–æ—Ö—Ä–∞–Ω–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            'page': page['page'],
            'publication': next_publication  # –ù—É–∂–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
        })

    except TelegramBadRequest:
        # –í—ã—Å–∫–æ—á–∏—Ç, –µ—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –ª–∏—Å—Ç–∞—Ç—å. –ó–∞–∏–≥–Ω–æ—Ä–∏–º
        pass
    except AttributeError:
        # –í—ã—Å–∫–æ—á–∏—Ç, –µ—Å–ª–∏ "–º–∞—Ä–∞–∑–º" —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
        pass


@admin_router.callback_query(AutoPost.view_publications, F.data == 'get_file')
async def show_mediafile(callback: CallbackQuery, state: FSMContext):
    """–ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤–æ–π –∏–º–µ–µ—Ç—Å—è"""
    publication_files = (await state.get_data())['publication'].get_file_id()
    if publication_files:  # –ï—Å–ª–∏ —Å–ø–∏—Å–∫–∞, –∑–Ω–∞—á–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±–µ–∑ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        await callback.answer()
        if publication_files[0][1] in {'photo', 'video', 'audio', 'document'}:
            media_group = MediaGroupBuilder()
            for mediafile in publication_files:
                media_group.add(type=mediafile[1], media=mediafile[0])
            await bot.send_media_group(chat_id=callback.from_user.id, media=media_group.build())
            await state.set_state(AutoPost.file_demonstration)
        else:
            if publication_files[0][1] == 'voice':
                await bot.send_voice(chat_id=callback.from_user.id, voice=publication_files[0][0])
                await state.set_state(AutoPost.file_demonstration)
            elif publication_files[0][1] == 'video_note':
                await bot.send_video_note(chat_id=callback.from_user.id, video_note=publication_files[0][0])
                await state.set_state(AutoPost.file_demonstration)
    else:
        await callback.answer(text='–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞!')


@admin_router.message(F.text == '‚è™ –í–µ—Ä–Ω—É—Ç—å—Å—è', AutoPost.file_demonstration)
async def return_from_file_demonstration(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –º—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤"""
    publication = (await state.get_data())['publication']
    page = await state.get_data()
    await state.set_state(AutoPost.view_publications)
    await msg.answer(text=publication.get_info(), reply_markup=await view_publications_list(page))


@admin_router.callback_query(AutoPost.view_publications, F.data == 'return')
async def return_to_view_queue(callback: CallbackQuery, state: FSMContext):
    """–ó–¥–µ—Å—å –º—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –æ—á–µ—Ä–µ–¥–∏"""
    await callback.message.delete()
    publication = (await state.get_data())['publication']
    page = await state.get_data()
    await callback.message.answer(text=publication.get_info(), reply_markup=await view_publications_list(page))


@admin_router.callback_query(AutoPost.view_publications, F.data == 'start_delete')
async def start_deleting_publication(callback: CallbackQuery):
    """–ó–¥–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    await callback.message.delete()
    await callback.message.answer(text='‚ÄºÔ∏è–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏‚ÄºÔ∏è',
                                  reply_markup=await deletion_confirmation())


@admin_router.callback_query(AutoPost.view_publications, F.data == 'delete')
async def delete_publication(callback: CallbackQuery, state: FSMContext):
    """–ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""

    publication_info = await state.get_data()  # –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Å–∫–∏–Ω–µ–º –≤—Å–µ –≤ –æ–¥–∏–Ω —Å–ª–æ–≤–∞—Ä—å

    # –ò–Ω–¥–µ–∫—Å —É–¥–∞–ª—è–µ–º–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —ç—Ç–æ page['page'] - 1
    post_to_be_deleted_index = publication_info['page'] - 1
    queue = dict_queue[publication_info['channel_id']]
    await queue.remove_publication(post_to_be_deleted_index)

    # –¢–µ–ø–µ—Ä—å –∏–∑–º–µ–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏—è page['page'] –∏ page['count']
    if publication_info['page'] == publication_info['count']:
        publication_info['page'] -= 1
    publication_info['count'] -= 1
    await state.update_data({
        'page': publication_info['page'],
        'count': publication_info['count']
    })

    # –ò –æ–±–Ω–æ–≤–∏–º –ø–æ–∫–∞–∑ –æ—á–µ—Ä–µ–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    if publication_info['count'] > 0:
        publication = (await queue.get_list_publication())[publication_info['page'] - 1]
        await callback.message.edit_text(text=publication.get_info(),
                                         reply_markup=await view_publications_list(publication_info))
    else:
        await callback.message.delete()
        await callback.message.answer(text='<b>–û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø—É—Å—Ç–∞!</b>', reply_markup=auto_posting)
        await state.clear()


@admin_router.message(F.text == '‚è™ –í–µ—Ä–Ω—É—Ç—å—Å—è', AutoPost.view_publications)
async def return_to_autoposting_menu(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –º–µ–Ω—é –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    await state.clear()
    await msg.answer(text='–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø—Ä–µ–∫—Ä–∞—â–µ–Ω', reply_markup=auto_posting)
