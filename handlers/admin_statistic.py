from datetime import date, timedelta
from loader import db, bot
from utils import admin_router
from states import ViewStatistic
from keyboards import (cancel_button,
                       QueueSelection,  # –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
                       queue_selection_keyboard,  # –¢–∞–∫ –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç.
                       stat_period_markup, back_button, main_admin_keyboard)

from aiogram import F, html
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext


def data_processing(proc_data: list, date_interval: list, channel_name: str) -> str:
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∫–∞–Ω–∞–ª–∞, –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É"""
    money_received = 0
    is_member = 0
    trail_sub = 0
    left_channel = 0
    date_interval = ' - '.join(date_interval)

    for reporting_day in proc_data:
        money_received += reporting_day['money_received']
        is_member += reporting_day['is_member']
        trail_sub += reporting_day['trail_sub']
        left_channel += reporting_day['left_channel']

    ready_string = (f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞ <i><b>{html.quote(channel_name)}</b></i>\n'
                    f'–û—Ç—á–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥: <b>{date_interval}</b>\n\n'
                    f'üíµ –í—ã—Ä—É—á–∫–∞: <b>{money_received}</b>\n'
                    f'üöπ –ù–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: <b>{is_member}</b>\n'
                    f'üÜì –í—ã–¥–∞–Ω–æ –ø—Ä–æ–±–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: <b>{trail_sub}</b>\n'
                    f'üîï –û—Ç–ø–∏—Å–∞–ª–æ—Å—å: <b>{left_channel}</b>')

    return ready_string


@admin_router.message(F.text == 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def start_view_statistic(msg: Message, state: FSMContext):
    """–ó–¥–µ—Å—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await state.set_state(ViewStatistic.begin)
    await msg.answer(text='–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', reply_markup=await queue_selection_keyboard())


@admin_router.callback_query(QueueSelection.filter(), ViewStatistic.begin)
async def choice_period_viewing(callback: CallbackQuery, callback_data: QueueSelection, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    # –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω–∏–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    channel_name = (await bot.get_chat(callback_data.chnl_id)).title
    await state.set_data({'channel_id': callback_data.chnl_id, 'channel_name': channel_name})
    await callback.message.delete()
    await callback.message.answer(text='–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:',
                                  reply_markup=await stat_period_markup())
    await state.set_state(ViewStatistic.set_period)


@admin_router.callback_query(ViewStatistic.set_period)
async def set_statistic_period(callback: CallbackQuery, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –¥–æ—Å—Ç–∞–µ—Ç –∏–∑ –ë–î –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥,
    —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—É—é —Å—Ç—Ä–æ–∫—É –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Ç—Ä–µ–∑–æ–∫"""
    channel_info = await state.get_data()
    date_interval = {
        'week': [str(date.today() - timedelta(days=7)), str(date.today() - timedelta(days=1))],
        'month': [str(date.today() - timedelta(days=30)), str(date.today() - timedelta(days=1))],
    }
    stat_data = None  # –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    msg_text = ''
    await callback.message.delete()
    if callback.data == 'today':
        stat_data = await db.get_today_statistic(channel_id=channel_info['channel_id'], date_today=str(date.today()))
        msg_text = data_processing(
            proc_data=stat_data,
            date_interval=[str(date.today())],
            channel_name=channel_info['channel_name']
        )
        await callback.message.answer(text=msg_text, reply_markup=back_button())

    elif callback.data in ['week', 'month']:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        stat_data = await db.get_statistic_data(
            channel_id=channel_info['channel_id'],
            first_date=date_interval[callback.data][0],
            second_date=date_interval[callback.data][1]
        )
        msg_text = data_processing(
            proc_data=stat_data,
            date_interval=date_interval[callback.data],
            channel_name=channel_info['channel_name']
        )
        await callback.message.answer(text=msg_text, reply_markup=back_button())

    elif callback.data == 'all_days':
        stat_data = await db.get_statistic_for_all_period(channel_id=channel_info['channel_id'])
        msg_text = data_processing(
            proc_data=stat_data,
            date_interval=['–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã'],
            channel_name=channel_info['channel_name']
        )
        await callback.message.answer(text=msg_text, reply_markup=back_button())

    elif callback.data == 'user_date':
        await state.set_state(ViewStatistic.set_user_date)
        msg_text = ('–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n"2024-01-01 2024-01-09"\n'
                    '<b>–±–µ–∑ –∫–∞–≤—ã—á–µ–∫ –∏ –ø–µ—Ä–≤–∞—è –¥–∞—Ç–∞ –º–µ–Ω—å—à–µ –≤—Ç–æ—Ä–æ–π‚ÄºÔ∏è</b>')
        await callback.message.answer(text=msg_text, reply_markup=cancel_button)

    elif callback.data == 'go_back':

        await callback.message.answer(text='–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:',
                                      reply_markup=await queue_selection_keyboard())
        await state.set_state(ViewStatistic.begin)

    elif callback.data == 'back':
        await callback.message.answer(text='–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:',
                                      reply_markup=await stat_period_markup())


@admin_router.message(ViewStatistic.set_user_date, F.text.regexp(r'\d{4}-\d{2}-\d{2}\s\d{4}-\d{2}-\d{2}'))
async def get_user_date_interval(msg: Message, state: FSMContext):
    user_date = msg.text.split()
    channel_info = await state.get_data()
    stat_data = await db.get_statistic_data(
        channel_id=channel_info['channel_id'],
        first_date=user_date[0],
        second_date=user_date[1]
    )
    msg_text = data_processing(proc_data=stat_data, date_interval=user_date, channel_name=channel_info['channel_name'])
    await msg.answer(text=msg_text, reply_markup=back_button())
    await state.set_state(ViewStatistic.set_period)  # –ß—Ç–æ –±—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥" –≤–µ—Ä–Ω—É—Ç—Å—è –Ω–∞–∑–∞–¥


@admin_router.callback_query(ViewStatistic.begin, F.data == 'cancel')
async def stat_cancel(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞"""
    await state.clear()
    await callback.message.delete()
    await callback.message.answer(text='–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=main_admin_keyboard)
