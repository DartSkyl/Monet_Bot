from loader import subscription_dict, channels_dict, bot, db
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters.callback_data import CallbackData


class ChannelsSelection(CallbackData, prefix='chnls'):
    """–ö–æ–ª–ª–±—ç–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º"""
    channel_id: int
    channel_name: str


class ChannelsForPayment(CallbackData, prefix='pay'):
    """–ö–æ–ª–ª–±—ç–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º"""
    channel_id: int
    channel_name: str


class SubscriptionSelection(CallbackData, prefix='sub'):
    """–ö–æ–ª–ª–±—ç–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    period: int
    cost: int


async def channels_selection():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    channels_list = await db.get_channel_list()
    channels_selection_markup = InlineKeyboardBuilder()
    for channel in channels_list:
        channels_selection_markup.button(text=channel['channel_name'],
                                         callback_data=ChannelsSelection(
                                             channel_id=channel['channel_id'],
                                             channel_name=channel['channel_name']
                                         ))
    channels_selection_markup.button(text='üö´ –û—Ç–º–µ–Ω–∞', callback_data='cancel')
    channels_selection_markup.adjust(1)
    return channels_selection_markup.as_markup(resize_keyboard=True)


async def channels_for_payment():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    channels_list = await db.get_paid_channels_list()
    channels_selection_markup = InlineKeyboardBuilder()
    for channel in channels_list:
        channels_selection_markup.button(text=channel['channel_name'],
                                         callback_data=ChannelsForPayment(
                                             channel_id=channel['channel_id'],
                                             channel_name=channel['channel_name']
                                         ))
    channels_selection_markup.button(text='üö´ –û—Ç–º–µ–Ω–∞', callback_data='cancel')
    channels_selection_markup.adjust(1)
    return channels_selection_markup.as_markup(resize_keyboard=True)


async def view_description(chnl_url):
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–æ–≤ –∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å–∞–º –∫–∞–Ω–∞–ª"""
    buttons = [
        [InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª ‚û°Ô∏è', url=chnl_url)],
        [InlineKeyboardButton(text='‚è™ –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='go_back')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def subscription_keyboard(sub_dict):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    sub_keyboard = InlineKeyboardBuilder()
    for period, cost in sorted(sub_dict.items()):
        if period != 0:
            sub_keyboard.button(text=f'–°—Ä–æ–∫: {period} –¥–Ω—è/–¥–Ω–µ–π, —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost}',
                                callback_data=SubscriptionSelection(period=period, cost=cost))
    sub_keyboard.button(text='üö´ –û—Ç–º–µ–Ω–∞', callback_data='cancel')
    sub_keyboard.adjust(1)
    return sub_keyboard.as_markup()
