import time
from loader import bot, channels_dict, subscription_dict, db
from utils import admin_router, SubManag
from states import SubscriptionManagement as SM
from kyeboards import (
    cancel_button, main_admin_keyboard,
    sub_manag, del_board, SubDel,
    add_sub_keyboard, AddSubForUser,
    add_sub_channel_keyboard, SubAddForChannel)
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from aiogram import F, html


@admin_router.message(F.text == '2')
async def test2(msg):
    print(channels_dict)


@admin_router.message(F.text == '‚öôÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å/—É–¥–∞–ª–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏')
async def check_sub_settings(msg: Message) -> None:
    """–•—ç–Ω–¥–ª–µ—Ä –≤—ã–≤–æ–¥–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º"""
    paid_chn_list = await db.get_paid_channels_list()
    sub_text = ''
    for elem in paid_chn_list:
        chn_name = ('<i>==========</i>\n<i><b>' + html.quote(elem['channel_name']) + '</b></i>:\n')
        sub_text += chn_name
        for period, cost in sorted(subscription_dict[elem['channel_id']].items()):
            if period == 0:
                sub_text += (f'–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ {int(cost / (60 * 60 * 24))} –¥–Ω—è/–¥–Ω–µ–π\n' if (cost / (60 * 60 * 24)) > 0
                             else '–ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞\n')
            else:
                sub_text += f'–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {period} –¥–Ω—è/–¥–Ω–µ–π, —Å—Ç–æ–∏–º–æ—Å—Ç—å {cost} —Ä—É–±–ª–µ–π\n'

    await msg.answer(text=sub_text, reply_markup=del_board(paid_chn_list))


@admin_router.callback_query(SubDel.filter())
async def sub_delete(callback: CallbackQuery, callback_data: SubDel) -> None:
    """–•—ç–Ω–¥–ª–µ—Ä —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏.
    –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–µ–∞–∫—Ü–∏–∏ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    await SubManag.delete_subscription(chl_id=callback_data.chnl_id, period=callback_data.sub_period)
    await callback.answer()
    edit_text = ''
    paid_chn_list = await db.get_paid_channels_list()
    for elem in paid_chn_list:
        chn_name = ('<i>==========</i>\n<i><b>' + html.quote(elem['channel_name']) + '</b></i>:\n')
        edit_text += chn_name
        for period, cost in sorted(subscription_dict[elem['channel_id']].items()):
            if period == 0:
                edit_text += (f'–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ {int(cost / (60 * 60 * 24))} –¥–Ω—è/–¥–Ω–µ–π\n' if (cost / (60 * 60 * 24)) > 0
                              else '–ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞\n')
            else:
                edit_text += f'–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {period} –¥–Ω—è/–¥–Ω–µ–π, —Å—Ç–æ–∏–º–æ—Å—Ç—å {cost} —Ä—É–±–ª–µ–π\n'

    await callback.message.edit_text(text=edit_text, reply_markup=del_board(paid_chn_list))


@admin_router.message(F.text == 'üíµ –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É')
async def set_paid_sub_step_1(msg: Message, state: FSMContext) -> None:
    """–•—ç–Ω–¥–ª–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ç—ç–π—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    m_text = ('–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n'
              '<i><b>–ü—Ä–∏–º–µ—Ä:</b></i> –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é 100 —Ä—É–±–ª–µ–π - "30 100" <b>–±–µ–∑ –∫–∞–≤—ã—á–µ–∫!</b>')
    # m_text = '–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:'
    # sub_keyboard = await add_sub_channel_keyboard()
    await msg.answer(text=m_text, reply_markup=cancel_button)
    await state.set_state(SM.set_paid_sub)


@admin_router.message(SM.set_paid_sub, F.text.regexp(r'\d{1,}\s\d{1,}$'))
async def set_paid_sub_step_2(msg: Message, state: FSMContext) -> None:
    """–í —Ö—ç–Ω–¥–ª–µ—Ä–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    sub_set = msg.text.split()
    if int(sub_set[0]) > 0:
        await state.set_data({'sub_info': [sub_set[0], int(sub_set[1])]})
        ms_text = '–í—ã–±–µ—Ä–µ—Ç–µ, –Ω–∞ –∫–∞–∫–æ–π –∫–∞–Ω–∞–ª –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∏:'
        sub_keyboard = await add_sub_channel_keyboard()
        await msg.answer(text=ms_text, reply_markup=sub_keyboard)
    else:
        await msg.answer(text='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 0 –¥–Ω–µ–π? –î–∞–≤–∞–π –µ—â–µ —Ä–∞–∑ –ø–æ–ø—Ä–æ–±—É–µ–º!', reply_markup=cancel_button)


@admin_router.callback_query(SubAddForChannel.filter(), SM.set_paid_sub)
async def set_paid_sub_step_3(callback: CallbackQuery, callback_data: SubAddForChannel, state: FSMContext) -> None:
    """–•—ç–Ω–¥–ª–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    sub_set = await state.get_data()
    await SubManag.set_paid_subscription(
        channel_id=int(callback_data.chn_id),
        period=sub_set['sub_info'][0],
        cost=sub_set['sub_info'][1]
    )
    await callback.answer()
    ans_text = (f'–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª <i><b>{html.quote(callback_data.chn_name)}</b></i>\n'
                f'—Å—Ç–æ–∏–º–æ—Å—Ç—å—é <i><b>{sub_set["sub_info"][1]} —Ä—É–±–ª–µ–π</b></i> \n'
                f'—Å—Ä–æ–∫–æ–º –Ω–∞ <i><b>{sub_set["sub_info"][0]}</b></i> –¥–Ω—è/–¥–Ω–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
    await callback.message.answer(text=ans_text, reply_markup=sub_manag)
    await state.clear()


@admin_router.message(F.text == '‚è≤Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏')
async def set_trail_subscription(msg: Message, state: FSMContext) -> None:
    """–•—ç–Ω–¥–ª–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    await state.set_state(SM.set_trail_sub)
    await msg.answer(text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏\n"
                          "–ß—Ç–æ –±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –≤–≤–µ–¥–∏—Ç–µ 0", reply_markup=cancel_button)


@admin_router.message(SM.set_trail_sub, F.text.regexp(r'\d{1,}'))
async def set_trail_subscription_period(msg: Message, state: FSMContext) -> None:
    """–í —Ö—ç–Ω–¥–ª–µ—Ä–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    m_text = '–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:'
    sub_keyboard = await add_sub_channel_keyboard()
    await msg.answer(text=m_text, reply_markup=sub_keyboard)
    await state.set_data({'trail': int(msg.text)})


@admin_router.callback_query(SubAddForChannel.filter(), SM.set_trail_sub)
async def end_add_trail_sub(callback: CallbackQuery, callback_data: SubAddForChannel, state: FSMContext) -> None:
    """–•—ç–Ω–¥–ª–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    trail_period = await state.get_data()
    await SubManag.trail_sub_period(period=trail_period['trail'], chn_id=int(callback_data.chn_id))
    await callback.answer()
    ans_text = (
        f'–ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ <i><b>{html.quote(callback_data.chn_name)}</b></i> –æ–±–Ω–æ–≤–ª–µ–Ω–∞' if trail_period['trail'] > 0
        else f'–ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ <i><b>{html.quote(callback_data.chn_name)}</b></i> –æ—Ç–∫–ª—é—á–µ–Ω–∞')
    await state.clear()
    await callback.message.answer(text=ans_text, reply_markup=sub_manag)


@admin_router.message(F.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
async def add_sub_user(msg: Message, state: FSMContext) -> None:
    """–•—ç–Ω–¥–ª–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Ä—É—á–Ω—É—é"""
    await state.set_state(SM.add_subscription_a_user)
    await msg.answer(text='–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
                     reply_markup=cancel_button)


@admin_router.message(SM.add_subscription_a_user, F.forward_from.as_('reply') | F.text.regexp(r'\d{8,}$'))
async def add_subscription_1(msg: Message, state: FSMContext, reply=None):
    """–•—ç–Ω–¥–ª–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Ä—É—á–Ω—É—é. –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞."""
    if reply:
        await state.set_data({'uid': reply.id})
    else:
        await state.set_data({'uid': msg.text})
    chnl_markup = await add_sub_keyboard()
    await msg.answer(text='–í—ã–±–µ—Ä–µ—Ç–µ –Ω–∞ –∫–∞–∫–æ–π –∫–∞–Ω–∞–ª —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:', reply_markup=chnl_markup)


@admin_router.callback_query(AddSubForUser.filter(), SM.add_subscription_a_user)
async def add_sub_user(callback: CallbackQuery, callback_data: AddSubForUser, state: FSMContext) -> None:
    """–•—ç–Ω–¥–ª–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä—É—á–Ω—É—é. –õ–æ–≤–∏—Ç –∫–∞–Ω–∞–ª –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–≤–æ–¥ –ø–µ—Ä–∏–æ–¥–∞."""
    await state.update_data({'ch_id': callback_data.chl_id})
    await state.update_data({'ch_name': callback_data.chl_name})
    await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ–±–∞–≤–∏—Ç—å –∫ –ø–æ–¥–ø–∏—Å–∫–µ:', reply_markup=cancel_button)


@admin_router.message(SM.add_subscription_a_user, F.text.regexp(r'\d{1,5}$'))
async def add_subscription_2(msg: Message, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Ä—É—á–Ω—É—é"""
    sub_info = await state.get_data()
    print(sub_info)
    await SubManag.add_user_paid_sub(
        user_id=sub_info['uid'],
        channel_id=sub_info['ch_id'],
        period=int(msg.text)
    )
    ans_text = (f'–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sub_info["uid"]} –Ω–∞ –∫–∞–Ω–∞–ª {sub_info["ch_name"]} '
                f'—Å—Ä–æ–∫–æ–º –Ω–∞ {msg.text} –¥–Ω—è(–¥–Ω–µ–π) –¥–æ–±–∞–≤–ª–µ–Ω–∞')
    await msg.answer(text=ans_text, reply_markup=sub_manag)
    await state.clear()


@admin_router.message(SM.set_trail_sub)
async def error_input_trail_sub(msg: Message) -> None:
    """–•—ç–Ω–¥–ª–µ—Ä –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    await msg.answer(text='–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!\n–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º', reply_markup=cancel_button)


@admin_router.message(SM.add_subscription_a_user)
async def error_input_add_sub(msg: Message) -> None:
    """–•—ç–Ω–¥–ª–µ—Ä –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Ä—É—á–Ω—É—é"""
    await msg.answer(text='–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!\n–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º', reply_markup=cancel_button)


@admin_router.message(SM.set_paid_sub)
async def error_input_paid_sub(msg: Message) -> None:
    """–•—ç–Ω–¥–ª–µ—Ä –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    await msg.answer(text='–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!\n'
                          '–ü—Ä–∏–º–µ—Ä: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é 100 —Ä—É–±–ª–µ–π - '
                          '"30 100" –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏',
                     reply_markup=cancel_button)
